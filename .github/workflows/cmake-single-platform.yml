name: Build and Lint

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  PICO_SDK_FETCH_FROM_GIT: ON # Tell pico_sdk_import.cmake to fetch the SDK

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential python3 clang-format cppcheck

    - name: Fetch Pico SDK manually (for submodule init)
      run: |
        mkdir -p ${{ github.workspace }}/pico
        git clone --branch master --depth 1 https://github.com/raspberrypi/pico-sdk.git ${{ github.workspace }}/pico/pico-sdk
      env:
        PICO_SDK_PATH: ${{ github.workspace }}/pico/pico-sdk

    - name: Run clang-format
      run: |
        echo "Checking formatting..."
        # Find C/H files in src/ and potentially other project dirs (adjust as needed)
        # Exclude the fetched SDK directory
        find src/ -name '*.c' -o -name '*.h' | xargs clang-format --dry-run -Werror
        # If you don't have a .clang-format file, this will use a default style or fail.
        # Consider adding a .clang-format file to your repo root.

    - name: Run cppcheck
      run: |
        echo "Running static analysis..."
        # Check source files, enable all checks, exit on error, suppress missing system includes
        # Exclude the fetched SDK directory to avoid checking third-party code
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem --quiet --suppress=*:pico/* src/

    - name: Initialize Pico SDK Submodules
      run: |
        cd ${{ github.workspace }}/pico/pico-sdk
        git submodule update --init
      env:
        PICO_SDK_PATH: ${{ github.workspace }}/pico/pico-sdk

    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}/build
        -DPICO_SDK_PATH=${{ github.workspace }}/pico/pico-sdk
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        PICO_SDK_PATH: ${{ github.workspace }}/pico/pico-sdk

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Upload UF2 Artifact
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ github.sha }}
        path: ${{ github.workspace }}/build/*.uf2
